# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Time::HiRes::Util {

  static method nanoseconds_to_timespec : Sys::Time::Timespec ($nanoseconds : long) {
    
    my $sec = $nanoseconds / 1_000_000_000;
    
    my $nsec = $nanoseconds - $sec * 1_000_000_000;
    
    my $ts = Sys::Time::Timespec->new;
    
    $ts->set_tv_sec($sec);
    
    $ts->set_tv_nsec($nsec);
    
    return $ts;
  }
  
  static method timespec_to_nanoseconds : long ($ts : Sys::Time::Timespec) {
    
    my $nanoseconds = $ts->tv_sec * 1_000_000_000 + $ts->tv_nsec;
    
    return $nanoseconds;
  }
  
  static method microseconds_to_timeval : Sys::Time::Timeval ($microseconds : long) {
    
    my $sec = $microseconds / 1_000_000;
    
    my $usec = $microseconds - $sec * 1_000_000;
    
    my $ts = Sys::Time::Timeval->new;
    
    $ts->set_tv_sec($sec);
    
    $ts->set_tv_usec($usec);
    
    return $ts;
  }
  
  static method timeval_to_microseconds : double ($tv : Sys::Time::Timeval) {
    
    my $microseconds = $tv->tv_sec * 1_000_000 + $tv->tv_usec;
    
    return $microseconds;
  }
  
  static method float_seconds_to_timespec : Sys::Time::Timespec ($float_seconds : double) {
    
    unless ($float_seconds <= Fn->INT_MAX) {
      die "\$float_seconds must be less than or equal to Fn->INT_MAX.";
    }
    
    my $sec = (int)$float_seconds;
    
    my $nsec = (int)(($float_seconds - $sec) * 1_000_000_000);
    
    my $ts = Sys::Time::Timespec->new;
    
    $ts->set_tv_sec($sec);
    
    $ts->set_tv_nsec($nsec);
    
    return $ts;
  }
  
  static method timespec_to_float_seconds : double ($ts : Sys::Time::Timespec) {
    
    unless ($ts->tv_sec <= Fn->INT_MAX) {
      die "\$ts->tv_sec must be less than or equal to Fn->INT_MAX.";
    }
    
    my $float_seconds = (double)$ts->tv_sec + ($ts->tv_nsec / 1_000_000_000);
    
    return $float_seconds;
  }
  
  static method float_seconds_to_timeval : Sys::Time::Timeval ($float_seconds : double) {
    
    unless ($float_seconds <= Fn->INT_MAX) {
      die "\$float_seconds must be less than or equal to Fn->INT_MAX.";
    }
    
    my $sec = (int)$float_seconds;
    
    my $usec = (int)(($float_seconds - $sec) * 1_000_000);
    
    my $tv = Sys::Time::Timeval->new;
    
    $tv->set_tv_sec($sec);
    
    $tv->set_tv_usec($usec);
    
    return $tv;
  }
  
  static method timeval_to_float_seconds : double ($tv : Sys::Time::Timeval) {
    
    unless ($tv->tv_sec <= Fn->INT_MAX) {
      die "\$tv->tv_sec must be less than or equal to Fn->INT_MAX.";
    }
    
    my $float_seconds = (double)$tv->tv_sec + ($tv->tv_usec / 1_000_000);
    
    return $float_seconds;
  }
  
  static method float_seconds_to_nanoseconds : long ($float_seconds : double) {
    
    unless ($float_seconds <= Fn->INT_MAX) {
      die "\$float_seconds must be less than or equal to Fn->INT_MAX.";
    }
    
    my $nanoseconds = (long)($float_seconds * 1_000_000_000);
    
    return $nanoseconds;
  }
  
  static method nanoseconds_to_float_seconds : double ($nanoseconds : long) {
    my $float_seconds = $nanoseconds / 1_000_000_000;
    
    return $float_seconds;
  }
  
  static method float_seconds_to_microseconds : long ($float_seconds : double) {
    
    unless ($float_seconds <= Fn->INT_MAX) {
      die "\$float_seconds must be less than or equal to Fn->INT_MAX.";
    }
    
    my $microseconds = (long)($float_seconds * 1_000_000);
    
    return $microseconds;
  }
  
  static method microseconds_to_float_seconds : double ($microseconds : long) {
    
    my $float_seconds = $microseconds / 1_000_000;
    
    return $float_seconds;
  }
  
  static method timeval_interval : double ($tv_a : Sys::Time::Timeval, $tv_b : Sys::Time::Timeval) {
    
    my $tv_interval = ($tv_b->tv_sec - $tv_a->tv_sec) + ($tv_b->tv_usec - $tv_a->tv_usec) / 1_000_000;
    
    return $tv_interval;
  }
  
  static method timespec_interval : double ($ts_a : Sys::Time::Timespec, $ts_b : Sys::Time::Timespec) {
    
    my $ts_interspec = ($ts_b->tv_sec - $ts_a->tv_sec) + ($ts_b->tv_nsec - $ts_a->tv_nsec) / 1_000_000_000;
    
    return $ts_interspec;
  }
  
}
